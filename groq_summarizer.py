#!/usr/bin/env python3
"""
Groq API Integration for Ticket Summarization
Uses LLaMA 3.3 70B model for high-quality, fast summaries of NOC support tickets
"""

import json
import requests
import os
from typing import Optional, Dict, Any

class GroqSummarizer:
    def __init__(self, api_key: str):
        """
        Initialize Groq API client
        
        Args:
            api_key (str): Groq API key
        """
        self.api_key = api_key
        self.base_url = "https://api.groq.com/openai/v1/chat/completions"
        self.model = "llama-3.3-70b-versatile"  # Current model
        
    def summarize_ticket(self, ticket_content: str, max_tokens: int = 400) -> Optional[str]:
        """
        Summarize ticket content using Groq API
        
        Args:
            ticket_content (str): The full ticket thread content
            max_tokens (int): Maximum tokens for summary (default: 400)
            
        Returns:
            str: Generated summary or None if failed
        """
        
        system_prompt = """You are a technical support assistant specialized in summarizing NOC (Network Operations Center) support tickets. 

Your task is to create concise, technical summaries focusing on:
1. **Problem**: What is the core issue/complaint?
2. **Impact**: Who/what is affected?
3. **Actions Taken**: What solutions were attempted?
4. **Current Status**: What's the current state?
5. **Next Steps**: What needs to be done?

Keep summaries under 200 words and use technical language appropriate for IT professionals."""

        user_prompt = f"Summarize this NOC support ticket thread:\n\n{ticket_content}"
        
        payload = {
            "model": self.model,
            "messages": [
                {
                    "role": "system",
                    "content": system_prompt
                },
                {
                    "role": "user", 
                    "content": user_prompt
                }
            ],
            "max_tokens": max_tokens,
            "temperature": 0.1,
            "stream": False
        }
        
        headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json"
        }
        
        try:
            response = requests.post(
                self.base_url,
                json=payload,
                headers=headers,
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                summary = data['choices'][0]['message']['content'].strip()
                return summary
            else:
                print(f"Groq API error: {response.status_code} - {response.text}")
                return None
                
        except requests.exceptions.RequestException as e:
            print(f"Request error: {e}")
            return None
        except (KeyError, IndexError, json.JSONDecodeError) as e:
            print(f"Response parsing error: {e}")
            return None
    
    def test_connection(self) -> bool:
        """
        Test if Groq API is accessible with current API key
        
        Returns:
            bool: True if connection successful
        """
        test_content = "Test ticket: User reports internet connection issues. Checked cables and router. Issue resolved by rebooting modem."
        
        summary = self.summarize_ticket(test_content, max_tokens=50)
        return summary is not None

def format_summary_output(summary: str, ticket_url: str = "", char_count: int = 0) -> str:
    """
    Format the summary output with metadata
    
    Args:
        summary (str): The AI-generated summary
        ticket_url (str): Original ticket URL
        char_count (int): Character count of original content
        
    Returns:
        str: Formatted summary with metadata
    """
    from datetime import datetime
    
    formatted = f"""
=== AI SUMMARY (Generated by Groq LLaMA 3.3 70B) ===
Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
Original content: {char_count} characters
Source: {ticket_url if ticket_url else 'Unknown'}

{summary}

=== END SUMMARY ===
"""
    return formatted

if __name__ == "__main__":
    # Test the Groq integration
    import sys
    
    if len(sys.argv) < 2:
        print("Usage: python groq_summarizer.py 'ticket content here'")
        sys.exit(1)
    
    # Get API key from environment
    api_key = os.environ.get('GROQ_API_KEY')
    
    if not api_key:
        print("ERROR: GROQ_API_KEY environment variable not set")
        print("Please set your Groq API key: export GROQ_API_KEY='your-key-here'")
        sys.exit(1)
    
    summarizer = GroqSummarizer(api_key)
    
    # Test connection first
    if not summarizer.test_connection():
        print("ERROR: Unable to connect to Groq API")
        sys.exit(1)
    
    # Summarize provided content
    content = sys.argv[1]
    summary = summarizer.summarize_ticket(content)
    
    if summary:
        print(format_summary_output(summary, char_count=len(content)))
    else:
        print("ERROR: Failed to generate summary")
        sys.exit(1)